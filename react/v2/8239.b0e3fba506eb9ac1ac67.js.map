{"version":3,"sources":["webpack://homepage_react/./src/assets/languages/zh.js"],"names":["menu","about","overview","packages","root","basic","list","example","style","slot","table","info","compare","popover","position","align","button","group","pagination","message","notice","popup","timeline","localstorage","folder","application","fbsdk","apis","components","languages","validator","version_1","description","title","version_colon","release_colon","download_colon","downloads_colon","package","section","installation","render","parameters","nodeTree","sourceCode","paramType","array","object","string","number","function","boolean","node","name","entryObj","styleObj","slotObj","property","dataList","activeID","defaultActiveID","collapseEnable","onEntryClick","onToggle","ref","id","defaultCollapsed","children","headData","bodyData","mode","onDataClick","headObj","th","td","showState","showPosition","showAlign","withArrow","autoDetect","trigger","onShow","onHide","vertical","horizontal","buttonList","prependNode","appendNode","direction","listDisaled","childrenDisaled","onButtonClick","onPrependClick","onCoreClick","onAppendClick","disabled","useMessage","limit","transitionInDuration","transitionOutDuration","duration","closeable","type","context","closerNode","event","usePopup","defaultTransitionDuration","defaultPersistent","content","persistent","nodeObj","typeObj","nodeList","useSyncLocalStorage","old","new","initializer","impletement","facebookSDK","linkName","dispatch","key","chart","times"],"mappings":"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","file":"8239.b0e3fba506eb9ac1ac67.js","sourcesContent":["export default {\n  menu: {\n    about: '關於本站',\n    overview: '套件總覽',\n    packages: {\n      root: '套件',\n      basic: '基本介紹',\n      list: {\n        root: '清單',\n        example: {\n          list: '範例：清單',\n          menu: '範例：選單',\n          style: '範例：客製化外觀',\n          slot: '範例：客製化渲染',\n        },\n      },\n      table: {\n        root: '表',\n        example: {\n          list: '範例：清冊表',\n          info: '範例：資料表',\n          compare: '範例：比較表',\n          style: '範例：客製化外觀',\n          slot: '範例：客製化渲染',\n        },\n      },\n      popover: {\n        root: '氣泡框',\n        example: {\n          position: '範例：顯示位置',\n          align: '範例：對齊方式',\n        },\n      },\n      button: {\n        root: '按鈕',\n        basic: {\n          button: '基本介紹：按鈕',\n          group: '基本介紹：群組按鈕',\n        },\n        example: {\n          button: '範例：按鈕',\n          group: '範例：群組按鈕',\n          pagination: '範例：分頁按鈕',\n          style: '範例：客製化外觀',\n          slot: '範例：客製化渲染',\n        },\n      },\n      message: {\n        root: '訊息',\n        basic: {\n          message: '基本介紹：動態訊息',\n          notice: '基本介紹：靜態訊息',\n        },\n        example: {\n          message: '範例：動態訊息',\n          notice: '範例：靜態訊息',\n        },\n      },\n      popup: {\n        root: '彈出視窗',\n        example: '範例',\n      },\n      timeline: {\n        root: '時間線',\n        example: {\n          position: '範例：顯示位置',\n          align: '範例：對齊方式',\n        },\n      },\n      localstorage: '同步本地儲存',\n      folder: '組件夾',\n    },\n    application: {\n      root: '應用套件',\n      fbsdk: {\n        root: '臉書軟體開發套件',\n        basic: '基本介紹',\n        apis: '應用程式介面',\n        components: '社交外掛程式',\n      },\n      languages: '多語言切換器',\n      validator: '驗證器',\n    },\n    version_1: '前往舊站 v1',\n  },\n  about: {\n    description:\n      'React 是我入門前端時，第一個學習的JavaScript框架，事實上，在這之前也有使用 jQuery 的開發經驗，當我還是嵌入式系統的軟體工程師時。這邊主要基於 React 的設計思維，利用其 React 特有的性質來開發低依賴性、高自由度的套件，以利於完成客製化需求，如果這些套件在使用上有什麼困難，或者對於套件的開發有其他的想法或期待，還請多多與我分享您的想法。',\n  },\n  overview: {\n    title: '套件總覽',\n    version_colon: '發布版本：',\n    release_colon: '發布日期：',\n    download_colon: '本周下載量：',\n    downloads_colon: '每周下載量：',\n  },\n  package: {\n    version_colon: '發布版本：',\n    release_colon: '發布日期：',\n    section: {\n      installation: '安裝',\n      render: '渲染',\n      parameters: '參數',\n      nodeTree: '節點樹',\n      example: '範例',\n      sourceCode: '源代碼',\n    },\n    paramType: {\n      array: '陣列',\n      object: '物件',\n      string: '字串',\n      number: '數字',\n      function: '函式',\n      boolean: '布林',\n      node: '節點',\n    },\n    list: {\n      name: '清單',\n      description: {\n        basic:\n          '這個套件結合清單與菜單的功能，利用展開收闔的功能，以及導頁的功能(React-router, history,...等)，便是後台網站常見的菜單，配合我們設計的氣泡框。便可成為下拉式選單。',\n      },\n      parameters: {\n        entryObj: '如果 entry.children 有被定義。則當點擊時會觸發 onToggle ，反之，則觸發 onEntryClick 。',\n        styleObj: '套件中任何具有 className 的節點，皆能使用 styleObj 定義 inline CSS。',\n        slotObj: '資料中的項目皆能以 id 在 slotObj 定義客製化的節點內容。',\n      },\n      property: {\n        dataList: 'entryObj 的陣列。',\n        activeID: '指定激活的 entry 之 id。',\n        defaultActiveID: '預設激活的 entry 之 id。',\n        collapseEnable: '開啟展開 / 收合功能。',\n        styleObj: '客製化外觀。',\n        slotObj: '客製化節點。',\n        onEntryClick: '項目點擊事件函式。',\n        onToggle: '項目層展開 / 收合切換之事件函式。',\n        ref: '支援 React.ref。',\n      },\n      entryObj: {\n        id: '項目識別名。',\n        title: '項目顯示名。',\n        defaultCollapsed: '當項目具有子清單，可預設展開 / 收合狀態。',\n        children: '子清單。',\n      },\n      slotObj: {\n        entryObj:\n          '套件支援客製化節點的功能，當以函式客製化節點渲染時，函式初始為 (entry) => {} ，其中輸入值為該節點的原始資料。',\n      },\n      nodeTree: {\n        notice: '附註：層的計算係由0開始。',\n      },\n      example: {\n        list: {\n          title: '範例：清單',\n          description: '最基本的清單，僅需要輸入資料的陣列即可。',\n        },\n        menu: {\n          title: '範例：選單',\n          description:\n            '當我們啟用展開/收合的功能時，簡易地選單就產生了，同時當資料的物件被點擊時，還會觸發 onToggle 或 onEntryClick，如果是有子目錄的物件，便會觸發 onToggle，反之則觸發 onEntryClick，如果是有子目錄的物件，便會觸發，並且，事件函式的輸入參數為被點擊物件的原始資料。另外，我們能用 defaultActiveID 指定預設激活的物件，也可以配合 useState 控制 activeID。',\n        },\n        style: {\n          title: '範例：客製化外觀',\n          description:\n            '這邊將展示如何使用 styleObj，以 inline CSS 的方式客製化套件的外觀，並示範如何結合 activeID 的使用，標記出激活中的物件，但也可以僅以 defaultActiveID 標記初始激活的物件，最後再以 styleObj 於對應的 className 設定外觀。',\n        },\n        slot: {\n          title: '範例：客製化渲染',\n          description:\n            '單純的外觀渲染，可能過於單調，有些物件的渲染也許會需要一些客製化：渲染成表單、按鈕 ... 等，因此，可以利用 slotObj 的方式，用字串、節點或函式的方式客製化節點的渲染。',\n        },\n      },\n    },\n    table: {\n      name: '表',\n      description: {\n        basic:\n          '表的設計本身分成三種模式：列表、資訊與資訊並列，使用視窗監聽，再配合客製化的外觀。即可完成漂亮的響應式的表顯示。未來還會再擴充表頭的設定功能，讓表可以更輕易地完成：分頁、排序、搜尋、欄位過濾等功能。',\n      },\n      parameters: {\n        styleObj: '套件中任何具有 className 的節點，皆能使用 styleObj 定義 inline CSS。',\n        slotObj:\n          '藉由 bodyObj.id，我們可以在 slotObj 客製化表的資料渲染內容，並且利用前綴 th_ 與 td_ 指定想要客製化的部分。',\n      },\n      property: {\n        headData: 'headObj 的陣列。',\n        bodyData: 'bodyObj 的陣列。',\n        mode: '切換表的顯示方式：list、info、compare.',\n        styleObj: '客製化外觀。',\n        slotObj: '客製化表頭、資料。',\n        onDataClick: '資料點擊事件函式。',\n        ref: '支援 React.ref。',\n      },\n      headObj: {\n        id: '表頭識別名。',\n        name: '表頭顯示名。',\n      },\n      slotObj: {\n        th:\n          '套件支援客製化節點的功能，當以函式客製化節點渲染時，函式初始為 (headObj) => {} ，其中輸入值為該節點的表頭資料。',\n        td:\n          '套件支援客製化節點的功能，當以函式客製化節點渲染時，函式初始為 (bodyObj, headObj) => {} ，其中輸入值為該節點的原始資料與表頭資料。',\n      },\n      nodeTree: {\n        notice: '附註：資料的流水號係由0開始。',\n        list: '清冊表',\n        info: '資料表',\n        compare: '比較表',\n      },\n      example: {\n        list: {\n          title: '範例：清冊表',\n          description: '輸入表頭、資料後，即可匯出最基本的表。',\n        },\n        info: {\n          title: '範例：資料表',\n          description: '輸入表頭、資料後，再切換成資料模式即可。',\n        },\n        compare: {\n          title: '範例：比較表',\n          description: '輸入表頭、資料後，再切換成比對模式即可。',\n        },\n        style: {\n          title: '範例：客製化外觀',\n          description: '這邊將展示如何使用 styleObj，以 inline CSS 的方式，於對應的 className 設定外觀。',\n        },\n        slot: {\n          title: '範例：客製化渲染',\n          description:\n            '單純的外觀渲染，可能過於單調，有些物件的渲染也許會需要一些客製化：渲染成表單、按鈕 ... 等，因此，可以利用 slotObj 的方式，用字串、節點或函式的方式客製化節點的渲染。',\n        },\n      },\n    },\n    popover: {\n      name: '氣泡框',\n      description: {\n        basic:\n          '氣泡框預設有偵測視窗邊界的功能，可靈活的切換顯示位置與對齊方式，也具有強制鎖定顯示狀態的設計，另外如果結合氣泡框與清單的套件，便可成為下拉式選單。',\n      },\n      parameters: {\n        styleObj: '套件中任何具有 className 的節點，皆能使用 styleObj 定義 inline CSS。',\n      },\n      property: {\n        showState: '控制氣泡框顯示狀態。',\n        showPosition: '控制氣泡框顯示位置：top、right、bottom、left。',\n        showAlign: '控制氣泡框對齊位置：begin、center、end。',\n        withArrow: '控制顯示為對話框。',\n        autoDetect: '自動偵測式窗邊界功能，並自動切換氣泡框顯示與對齊位置。預設為啟用。',\n        trigger: '渲染氣泡框觸發節點。',\n        styleObj: '客製化外觀。',\n        onToggle: '氣泡框狀態切換事件函式。',\n        onShow: '顯示氣泡框事件函式。',\n        onHide: '隱藏氣泡框事件函式。',\n        ref: '支援 React.ref。',\n      },\n      example: {\n        vertical: '垂直',\n        horizontal: '水平',\n        position: {\n          title: '範例：顯示位置',\n          description:\n            '簡單地展示如何控制氣泡框顯示的位置。氣泡框預設啟用瀏覽器邊界偵測（autoDetect），當氣泡框超出瀏覽器邊界時，會依據顯示位置與對齊方式做濤整，此功能也可以關掉。',\n        },\n        align: {\n          title: '範例：對齊方式',\n          description:\n            '簡單地展示如何控制氣泡框顯示的位置。氣泡框預設啟用瀏覽器邊界偵測（autoDetect），當氣泡框超出瀏覽器邊界時，會依據顯示位置與對齊方式做濤整，此功能也可以關掉。',\n        },\n      },\n    },\n    button: {\n      name: {\n        button: '按鈕',\n        group: '群組按鈕',\n      },\n      description: {\n        basic:\n          '本套件包含兩個套件，一為按鈕（button），一為群組按鈕（button group），事實上兩者開發的結構並無直接相關聯，只是兩者皆為按鈕相關的套件，所以放在同一個套件包裡，方便安裝使用。',\n        button:\n          '本套件包含兩個套件，一為按鈕（button），一為群組按鈕（button group），事實上兩者開發的結構並無直接相關聯，只是兩者皆為按鈕相關的套件，所以放在同一個套件包裡，方便安裝使用，而這邊為按鈕的基本介紹。雖然外觀設計並非本實驗室開發套件的重點，然為了貼近實際應用，還是會提供一些常見的按鈕外觀作為範例。',\n        group:\n          '本套件包含兩個套件，一為按鈕（button），一為群組按鈕（button group），事實上兩者開發的結構並無直接相關聯，只是兩者皆為按鈕相關的套件，所以放在同一個套件包裡，方便安裝使用，這邊為按鈕祖的基本介紹。範例的部分，還會展示如何使用群組按鈕實作，常與表（table）配合使用的分頁按鈕。',\n      },\n      parameters: {\n        styleObj: '套件中任何具有 className 的節點，皆能使用 styleObj 定義 inline CSS。',\n      },\n      property: {\n        buttonList: '群組按鈕的按鈕清單，其為文字陣列。',\n        activeID:\n          '指定激活的按鈕之 id。如果按鈕來自 buttonList ，其 id 格式為 `list_${order}`，如果按鈕來自 children ，其 id 格式為 `children_${order}`，並且 order 的計算係由0開始。',\n        defaultActiveID: '預設激活的按鈕之 id。',\n        prependNode: '定義按鈕前綴。',\n        appendNode: '定義按鈕後綴。',\n        direction: '群組按鈕顯示按鈕方向：horizontal、vertical。',\n        listDisaled: 'buttonList 的停用按鈕清單，內容值為按鈕的 order。',\n        childrenDisaled: 'children 的停用按鈕清單，內容值為按鈕的 order。',\n        styleObj: '客製化外觀。',\n        onButtonClick: '按鈕整體點擊事件函式。',\n        onEntryClick: '群組按鈕下子按鈕的點擊事件函式。',\n        onPrependClick: '按鈕前綴整體點擊事件函式。',\n        onCoreClick: '按鈕內容整體點擊事件函式。',\n        onAppendClick: '按鈕後綴整體點擊事件函式。',\n        disabled: '停用狀態按鈕將不觸發任何點擊事件。',\n        ref: '支援 React.ref。',\n      },\n      nodeTree: {\n        notice: '附註：序號的計算係由0開始。',\n      },\n      example: {\n        button: {\n          title: '範例：按鈕',\n          description:\n            '這邊將會示範如何產生按鈕，我們可以增加前綴節點，或後綴節點，並且幫他們，或者整個按鈕增加觸發事件。點擊按鈕後，可以在主控台（console）看看發生什麼事。',\n        },\n        group: {\n          title: '範例：群組按鈕',\n          description: '這邊將會展示如何產生群組按鈕，除了可以設定排列方向之外，還能設定組員按鈕的點擊事件。',\n        },\n        pagination: {\n          title: '範例：分頁按鈕',\n          description:\n            '此頁將展示如何使用按鈕、群組按鈕構成分頁按鈕，這邊也將是本實驗室開發套件的核心概念，套件開發的初衷並非協助一般的開發者迅速開發網頁，而是提供相較進階的開發者，能如本頁所展示般地，自由地組合套件形成想要開發的應用套件，如此便能彈性地符合客製化開發需求，因此，如果開發者不需要處理太多客製化需求，而已快速開發為訴求者，本實驗室開發的套件可能無法滿足使用需求。',\n        },\n        style: {\n          title: '範例：客製化外觀',\n          description: '這邊將展示如何使用 styleObj，以 inline CSS 的方式，於對應的 className 設定外觀。',\n        },\n      },\n    },\n    message: {\n      name: {\n        message: '訊息',\n        notice: '提醒',\n      },\n      description: {\n        basic:\n          '這個套件主要分成兩種訊息呈現，動態的訊息通知（Message）、以及靜態的提醒（Notice），使用的方式也稍有不同，所以會分別各自成一個頁面介紹之。',\n        message: '這個套件主要核心為訊息通知的功能，採用Hook的方式使用，以下介紹使用的方式。',\n        notice:\n          '套件的另外一個部分，則是靜態的提醒，本身的用途是提供訊息通知的基本外觀組件，倘若不是使用訊息通知的方式做動態提醒，亦可用直接渲染套件的方式，做靜態式的提醒。',\n        useMessage: '此套件是我的第一個用hook機制的套件，這邊將介紹關於hook的用法。',\n      },\n      property: {\n        limit: '訊息通知的顯示上限。',\n        transitionInDuration: '顯示的過場動畫時間。（millisecond）',\n        transitionOutDuration: '消失的過場動畫時間。（millisecond）',\n        duration: '訊息通知的存在時間。（millisecond）',\n        horizontal: '訊息通知的水平位置：left、center、right。',\n        vertical: '訊息通知的垂直位置：top、middle、bottom。',\n        closeable: '是否能強制關閉訊息通知。',\n        type:\n          '訊息通知種類，套件本身已經附帶一些基本的樣式，當然您也可以自行客製，這個參數只是用來控制className，現成樣式：blue、grey、green、red、yello、light、dark。',\n        context: '訊息通知的內容',\n        closerNode: '此參數只有當closeable為true的時候才有作用，是用來渲染closer的按鈕顯示。',\n      },\n      example: {\n        message: {\n          title: '範例：動態訊息',\n          style: '樣式',\n          event: '事件',\n          description: '這邊將示範藉由Hook的方式，顯示的動態訊息通知。',\n        },\n        notice: {\n          title: '範例：靜態訊息',\n          style: '樣式',\n          description: '倘若無須動態的訊息通知，亦能採用如一般套件的方式渲染。',\n        },\n      },\n    },\n    popup: {\n      name: '彈出視窗',\n      description: {\n        basic: '彈出視窗是一個很常見的功能，主要用於確認、提示、警示 ... 等互動操作，或者少量資訊、欄位的內容的顯示。',\n        usePopup: '此套件採用 hook 的方式控制顯示與隱藏，這邊將介紹關於hook的用法。',\n      },\n      property: {\n        defaultTransitionDuration: '預設消失的過場動畫時間。（millisecond）',\n        defaultPersistent: '預設是否鎖定背景點擊後關閉子視窗的功能。',\n        content: '彈出視窗內容。',\n        duration: '消失的過場動畫時間。（millisecond）',\n        persistent: '是否鎖定背景點擊後關閉子視窗的功能。',\n        onShow: '顯示氣泡框事件函式。',\n        onHide: '隱藏氣泡框事件函式。',\n      },\n      example: {\n        basic: {\n          title: '範例',\n          description:\n            '簡單地展示如何控制氣泡框顯示的位置。氣泡框預設啟用瀏覽器邊界偵測（autoDetect），當氣泡框超出瀏覽器邊界時，會依據顯示位置與對齊方式做濤整，此功能也可以關掉。',\n        },\n      },\n    },\n    timeline: {\n      name: '時間線',\n      description: {\n        basic:\n          '時間線是一個很簡單也很常見的功能，主要用來呈現具有時間概念的資料，搭配一些套件，可以讓資料呈現變得更視覺友善。',\n      },\n      parameters: {\n        nodeObj:\n          '與typeObj搭配著使用，當有客製化渲染特定事件時，可以在nodeList中，將需要客製的事件轉成 nodeObj，以利 typeObj 的呼叫',\n        typeObj: '定義時間線上特定類別事件點的客製化渲染。',\n        styleObj: '套件中任何具有 className 的節點，皆能使用 styleObj 定義 inline CSS。',\n      },\n      property: {\n        nodeList: '時間線的事件清單資料。',\n        showPosition: '控制事件內容在時間線上顯示的位置：left、right、x、top、bottom、y。',\n        showAlign: '控制事件時間點對於時間線上的對齊位置：begin、center、end。',\n        typeObj: '客製化渲染事件顯示方式，搭配nodeList，可依據不同事件類別做不同的外觀渲染。',\n        styleObj: '客製化外觀。',\n        ref: '支援 React.ref。',\n      },\n      example: {\n        vertical: '垂直',\n        horizontal: '水平',\n        position: {\n          title: '範例：顯示位置',\n          description: '簡單地展示如何控制事件資料在時間線上顯示的位置。',\n        },\n        align: {\n          title: '範例：對齊方式',\n          description: '簡單地展示如何控制事件點與事件內容，在時間線上對齊的位置。',\n        },\n      },\n    },\n    localstorage: {\n      name: '同步本地儲存',\n      description:\n        '同步存取本地儲存的方式，除了原生操作之外，也可以配合 react-redux，使用 redux-persist，然而這是一個微小的工具性質組件，採用 React Hook 的方式設計，提供給不需要Redux，卻又需要同步存取本地儲存的情境。',\n      property: {\n        name: '本地儲存區儲存的鍵名，可改為產品或專案名稱，以利識別。',\n        useSyncLocalStorage: '此套件採用 hook 的方式存取本地儲存，這邊將介紹關於hook的用法。',\n      },\n    },\n    folder: {\n      name: '組件夾',\n      description:\n        '這是一個微小的工具性質組件，按照HTML的撰寫習慣，每寫一層節點（Node），都會往內縮排，以便於閱讀，但當我們用越多useContext的應用時，縮排就會越來越多層，而這個套件的用途，就是在於幫忙折疊這種一層只有一個子組件的情境，讓節點的程式碼可以無需過多的縮排。',\n      property: {\n        components: '組件陣列，每一個組件都會是前一個組件的子組件。',\n      },\n      example: {\n        old: {\n          title: '原寫法',\n          description:\n            '在假設使用react-redux, react-router的套件下，如下所示，我們基本會有兩個Provider要加上，如果還有使用其他的套件，就會在繼續往下加...。',\n        },\n        new: {\n          title: '摺疊寫法',\n          description: '如套件說明所說，這個套件的用途，是為了減少多層單一子組件的縮排，造成程式碼閱讀不容易。',\n          notice:\n            '因為大部分的人都會使用ES-Lint，這邊建議暫時性關閉react/jsx-key檢查，因為這邊的節點陣列用法與其他的節點陣列不同，大致上不需要使用key，除非是特殊情境需要。',\n        },\n      },\n    },\n  },\n  application: {\n    version_colon: '發布版本：',\n    release_colon: '發布日期：',\n    section: {\n      installation: '安裝',\n      initializer: '初始化',\n      impletement: '實體',\n      trigger: '觸發',\n    },\n    facebookSDK: {\n      name: '臉書軟體開發套件',\n      description:\n        '此套件的核心並非原創套件，主要是以整理臉書（Facebook）提供的軟體開發套件，方便需要結合使用臉書服務的網站開發為目的，其中所有的參數控制皆可直接參照原文件只是控制，本站亦會提供整合所有功能的參數說明文件，提供使用者查詢參數方便。由於並非原創套件，主版號的編排依照使用的軟體開發套件版號，因此還請使用者注意參考文件與本套件的版本差異。因應套件的結構，本部分分成三部分介紹：基本、應用程式介面、社交外掛程式',\n      apis: {\n        name: '應用程式介面',\n        description:\n          '此套件主要分成兩個部分：應用程式介面、社交外掛程式，這裡我們將整理應用程式介面的文件，參數的輸入皆與原文件相同無誤，這邊僅做一些結構上的調整。',\n      },\n      components: {\n        name: '社交外掛程式',\n        description:\n          '此套件主要分成兩個部分：應用程式介面、社交外掛程式，這裡我們將整理社交外掛程式的文件，參數的輸入皆與原文件相同無誤，這邊僅做一些結構上的調整。',\n      },\n    },\n    languages: {\n      name: '多語言切換器',\n      description:\n        '對於跨國性服務來說，多國語言的支援往往是基本需求，雖然我們已有一些很出色的語言相關套件，如i18n，但我想開發的多語言切換器，主要是想降低套件的依賴性，以及降低一些非必要的功能支援，以最單純的核心功能，並且提供良好的擴充彈性，如果您需要很完整、方便的功能，可以考慮使用 i18n 之類的傑出套件，倘若需要的功能並不複雜，那麼也許你會想要試試看BTB Lab. 的多語言切換器。這邊我們將說明如何結合與基於 React 開發的網站使用。',\n      installation: {\n        description: '比較詳細的操作說明在我的 JavaScript Lab，這邊著重在如何與基於 React 開發的網站使用。',\n        linkName: '說明文件連結',\n      },\n      initializer: '@blacktoolbox/prototype-languages 需要在使用前執行初始化的動作。',\n      impletement:\n        '套件本身內有儲存語言字典的機制，也就是在執行 initializer 時，所執行的事情. 但我們還需要再使用前多語言切換器之前，實踐至少一個實體出來，而主要的產生語言清單、激活指定的語言，以及翻譯的動作皆須仰賴此實體，藉由：menu(), get(), set(), translate().',\n      trigger: {\n        description:\n          '這邊則是說明如何在切換語言之後，重新顯示或渲染網頁。當然地我們仍可以結合localStorage，用重新載入網站的方式，使得網頁以新指定的語言顯示對應翻譯。但 React 大多應用的情境是單頁式網站架構(SPA)，基本地我們能應用兩種機制，觸發網頁換新：distpatch 與 key.',\n        dispatch:\n          '我們可以結合儲存管理機制的套件（Flux、Redux、...），利用dispatch的機制換新頁面的語言呈現，在每個需要切換翻譯的套件裡，連結儲存裡的語言設定即可成就。',\n        key:\n          '為了保留語言設定，或者自動觸發切換語言之後的邏輯，大致上來說都會與儲存管理機制的套件做結合應用，但這邊還談及到一個不常使用的機制，倘若因應專案的開發需求，在UX的設計，想要讓網頁仍以重新載入網站的效果呈現語言切換時，可利用 React 中 key 的機制，在最頂層的節點加上 key 值，並綁定語言設定，故當語言切換後，更新儲存的語言設定，接著更新 key 值，最後因為 key 值不同，最頂層的套件被視為是新建立套件，使得整個網站已重新建立的方式，使用新指定語言的翻譯。但倘若實際的需求是要讓所有的檔案重新下載執行，仍須以重新載入的方式更新瀏覽器。',\n      },\n    },\n    validator: {\n      name: '驗證器',\n      description:\n        '大多數的排版框架皆含有驗證表單的功能，但各自排版框架的驗證器使用方式不盡相同，對於有些需要對於不同的案子，使用不同的排版框架的團隊而言，已經存在的驗證邏輯在移植上，可能就不是這麼方便，因此，我試著開發一般化的表單驗證器，或者可以更深一層地說它是變數驗證器，因為即使不與排版框架合用，單純寫在函數裡的變數格式驗證也是可以的，如此期望，應用此套件的人，可以一致地整合表單的驗證與函數的驗證。',\n    },\n  },\n  chart: {\n    times: '次數',\n  },\n};\n"],"sourceRoot":""}